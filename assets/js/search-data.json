{
  
    
        "post0": {
            "title": "Testing Function Runtime for Bipartite Graphs",
            "content": "import networkx as nx from typing import Dict, Tuple, List import numpy as np import timeit from random import randrange, randint import pandas as pd . The goal of this notebook is to compare the speed of functions designed for finding all neighbors within distance 3 of a vertex in a graph. . The current function in the github repo. . def robust_shortest_path_length(*args, **kwargs) -&gt; float: output = np.inf try: output = nx.shortest_path_length(*args, **kwargs) finally: return output def NeighborsSubgraph(contribution_graph: nx.Graph, grant: str) -&gt; nx.Graph: &quot;&quot;&quot;&quot;&quot;&quot; source = grant distances_to_source = { target: robust_shortest_path_length(contribution_graph, source, target) for target in contribution_graph.nodes } neighbors = [ node for (node, distance) in distances_to_source.items() if distance &lt;= 3 ] neighbors_subgraph = contribution_graph.subgraph(neighbors) return neighbors_subgraph . Proposed function . def Neighbors(contribution_graph: nx.Graph, grant: str) -&gt; nx.Graph: &quot;&quot;&quot;&quot;&quot;&quot; return nx.ego_graph(contribution_graph, grant, radius=3, center=False) . A bipartite graph, also called a bigraph, is a set of graph vertices decomposed into two disjoint sets such that no two graph vertices within the same set are adjacent. . def random_bipartite(set_a_card, set_b_card): &quot;&quot;&quot; This function creates a random bipartite graph. :param set_a_card: The cardinality of set_a. :param set_b_card: The cardinality of set_b. :return: A bipartite graph with random edges. &quot;&quot;&quot; if set_b_card &lt; set_a_card: print(&quot;Invalid.&quot;) return None set_a = set(range(1, set_a_card)) set_b = set(range(set_a_card, set_b_card)) bipart = nx.Graph() bipart.add_nodes_from(set_a, bipartite=0) bipart.add_nodes_from(set_b, bipartite=1) # verticies in A should be able to map to multiple vertices in set B. Consider adding a probability (maybe use exp geometric/exp) for num in set_a: vert = randrange(set_a_card, set_b_card) bipart.add_edge(num, vert) return bipart . set_a_card = randint(1, 1000) offset = randint(2,1000) set_b_card = randint(set_a_card + 1, set_a_card + offset) graph = random_bipartite(set_a_card, set_b_card) . original_setup = &#39;&#39;&#39;import networkx as nx from typing import Dict, Tuple, List import numpy as np from random import randrange, randint from __main__ import graph, set_a_card, NeighborsSubgraph &#39;&#39;&#39; original_func_test = &#39;&#39;&#39; NeighborsSubgraph(graph, set_a_card)&#39;&#39;&#39; . print(timeit.timeit(setup=original_setup, stmt=original_func_test, number=5000)) . 35.47419316000014 . new_func_setup = &#39;&#39;&#39;import networkx as nx from typing import Dict, Tuple, List import numpy as np from random import randrange, randint from __main__ import graph, set_a_card, Neighbors &#39;&#39;&#39; new_func_test = &#39;&#39;&#39;Neighbors(graph, set_a_card)&#39;&#39;&#39; . print(timeit.timeit(setup=new_func_setup, stmt=new_func_test, number=5000)) . 0.36424796899518697 . set_a_card = randint(1, 1000) offset = randint(2,1000) set_b_card = randint(set_a_card + 1, set_a_card + offset) graph = random_bipartite(set_a_card, set_b_card) . print(timeit.timeit(setup=original_setup, stmt=original_func_test, number=5000)) . 12.878640547998657 . print(timeit.timeit(setup=new_func_setup, stmt=new_func_test, number=5000)) . 7.304708761999791 . original_times = [] new_times = [] for i in range(1,500): max_card = 100 set_a_card = randint(1, max_card) offset = randint(1,max_card) set_b_card = randint(set_a_card + 1, set_a_card + offset) graph = random_bipartite(set_a_card, set_b_card) original_times.append(timeit.timeit(setup=original_setup, stmt=original_func_test, number=1000)) new_times.append(timeit.timeit(setup=new_func_setup, stmt=new_func_test, number=1000)) . sum(original_times)/len(original_times) . 0.46134089699808467 . sum(new_times)/len(new_times) . 0.0768285669839246 . for i in range(1,50): max_card = 1000 set_a_card = randint(1, max_card) offset = randint(1,max_card) set_b_card = randint(set_a_card + 1, set_a_card + offset) graph = random_bipartite(set_a_card, set_b_card) original_times.append(timeit.timeit(setup=original_setup, stmt=original_func_test, number=1000)) new_times.append(timeit.timeit(setup=new_func_setup, stmt=new_func_test, number=1000)) . sum(original_times)/len(original_times) . 1.2461581368814647 . sum(new_times)/len(new_times) . 0.0927666353028363 . original_times . [0.33958439999696566, 0.16548814000270795, 0.23011897800461156, 0.5222397519974038, 0.3396739560048445, 0.37772370900347596, 0.4575193529963144, 0.39399613400019007, 0.5394558400003007, 0.6111482179985614, 0.353503410005942, 0.6477286830049707, 0.24683908600127324, 0.4274328460014658, 0.7626426830029231, 0.8359886129983352, 0.40523568999924464, 1.009283718005463, 0.09408632299891906, 0.27120610199926887, 0.21957699800259434, 0.9694350019999547, 0.5277370940020774, 0.6626742420048686, 1.4702940060014953, 1.6876647300014156, 0.5720190439969883, 0.13763106100668665, 0.8748115679991315, 0.9580560500035062, 0.9724534050037619, 0.6257250499984366, 0.8444051550031872, 0.10949817399523454, 0.14942241899552755, 0.04323479199956637, 0.8266701090033166, 0.4762422729982063, 0.0966187500016531, 0.6537467460002517, 1.039138569001807, 0.4482927870049025, 0.30094081700372044, 0.4337230019955314, 0.20038886000111233, 0.8755566610052483, 0.8141911819984671, 0.1688337000014144, 0.13314665100187995, 0.2975124090007739, 0.3094483820023015, 0.26773773199965945, 0.26381719499477185, 0.6472694929980207, 0.6690413969990914, 0.4807489730010275, 0.58391760399536, 0.15514269700361183, 0.46672223300265614, 0.125550649005163, 0.40693560799991246, 0.4472526659956202, 0.6688588909964892, 0.2618485429993598, 0.2960022900006152, 0.252930351998657, 0.24921791100496193, 0.27863688900106354, 0.12840000000142027, 0.8475773280006251, 0.15563331399607705, 0.12904385300498689, 0.2870053509977879, 0.17544573699706234, 0.43691050399502274, 0.08763796599669149, 0.23305328899732558, 0.6684342559965444, 0.8273137709984439, 0.5223881999991136, 0.20511349300068105, 0.2921644260059111, 0.5212640469981125, 0.5878861279998091, 0.6797150260026683, 0.39575879699987127, 0.62680720800563, 0.14995748300134437, 0.4119616430034512, 0.13107936000596965, 0.34012338599859504, 0.20755092000035802, 0.10307408200606005, 0.33281501199962804, 0.872544611003832, 0.9519099400058622, 0.23331132500607055, 0.17966820199944777, 0.5834245070000179, 0.2576556299973163, 0.09336502299993299, 0.8693224870003178, 0.359337305999361, 0.5366655260004336, 0.21122118199855322, 0.08891067500371719, 0.6548217540039332, 0.3850572139999713, 0.2009216730002663, 0.2650717619981151, 0.20691202299349243, 0.4712494150007842, 0.3966181210053037, 0.29327282099984586, 0.9231190889986465, 0.04179662299429765, 0.6978568589984206, 0.21682434499962255, 0.22633505199337378, 0.7838587590013049, 0.4628433280013269, 0.6207597839966184, 0.43183791599585675, 0.39952484600507887, 0.7016051860045991, 0.2892651520014624, 0.7232046409990289, 0.04837635900184978, 0.3491847309996956, 0.16339272799814353, 0.31603918399923714, 0.22790215400164016, 0.3598749860029784, 0.27306018699891865, 0.13044844399701105, 0.16135130600014236, 0.6633860520014423, 0.5254012890000013, 0.037716844999522436, 0.5852374500027508, 0.3916825459964457, 0.5171037140025874, 0.7633689249996678, 0.1991189230029704, 0.8708832850024919, 0.27057942999817897, 0.3713073010003427, 0.07850544399843784, 0.6069479969955864, 0.791101319999143, 0.07351419300539419, 0.08563757699448615, 0.32722333000128856, 0.3739603630019701, 0.8154399960039882, 0.6883548879995942, 0.467424492999271, 0.325693967002735, 0.35737453999900026, 0.3570726399993873, 0.16381557800195878, 0.04007773600460496, 0.10954430099809542, 0.552784856998187, 0.5003617319962359, 0.1040122659978806, 0.35923704800370615, 0.7549705710043781, 0.5928710350053734, 0.4180880550047732, 0.7714433099972666, 0.5389071109966608, 0.33985805100383004, 0.4154714600008447, 0.3066134110049461, 0.17489410300186137, 0.6954020539997146, 0.3270981569949072, 0.49412456300342456, 0.5601098619954428, 0.17214227200020105, 0.4435488329982036, 0.6922573310002917, 0.6959242719967733, 0.3332012820028467, 0.7843402899961802, 0.41190371200355, 0.8710792109995964, 0.39652914500038605, 0.1528286989996559, 0.9198123390015098, 0.30307782199815847, 0.38907158399524633, 1.0557739559953916, 0.3133920449981815, 0.5239419630015618, 0.45524540500628063, 0.4674780280038249, 0.7778845529974205, 0.3911934080024366, 1.4066990670035011, 0.7733066419968964, 0.125308220005536, 0.10504128300090088, 0.03353736699500587, 0.42152397600148106, 1.165176361995691, 0.3120960960004595, 0.39817946500261314, 0.25570005000190577, 0.5634463439928368, 0.3336227539984975, 0.44399674600572325, 0.6780812239958323, 0.3409683989957557, 0.7484515530013596, 0.46945574400160694, 0.1438161059995764, 0.49652725699706934, 0.7296694300021045, 0.11558041800162755, 0.4098267199951806, 0.6135215169997537, 0.6322866839982453, 0.3209687449998455, 0.5599376629979815, 0.6197811889942386, 0.2866238000060548, 0.5415079590020468, 0.15105901600327343, 0.6002329699986149, 0.35456149299716344, 0.057419669996306766, 0.5259204899994074, 0.2638515459984774, 0.7201050930016208, 1.6567683479952393, 0.4275186869999743, 0.6507032360023004, 0.06083877899800427, 0.2710633050010074, 1.2327983369978028, 0.5265295040007913, 0.16111232899856986, 0.38278875799733214, 1.7259089209983358, 0.21335401200485649, 0.31754741499753436, 0.1615486989976489, 0.3656402050037286, 0.4374432429976878, 0.1399645679994137, 1.056893383996794, 0.1781966049966286, 0.9175565109981108, 0.768117125997378, 0.15266383499692893, 0.782494430000952, 0.28913872400153195, 0.12431982899579452, 0.25555375600379193, 0.22714756600180408, 0.970837239001412, 0.5446924390053027, 0.28500564800197026, 0.3486387469965848, 0.24569822400371777, 0.11449482800526312, 0.2549562239946681, 0.5602027049972094, 1.5371294349970412, 0.8432077469988144, 0.5967279770047753, 0.3285177540019504, 0.362989296001615, 0.03660589400533354, 0.8168800010025734, 0.7912411970028188, 0.5660358709938009, 0.2648252319995663, 0.24534482799936086, 0.6817791470020893, 1.1066477690037573, 0.9497226820021751, 0.24334721500054002, 0.3132236509991344, 0.918592305999482, 0.5408868169979542, 0.6944283399934648, 0.38920057600626023, 0.33785404299851507, 0.20822352699906332, 0.05746299099700991, 0.2684560429988778, 0.24537883499579038, 0.2624187389956205, 0.24622401999658905, 0.2601159909972921, 1.23781903499912, 0.07310912800312508, 0.23733678400458302, 1.0055679889992462, 0.19442468000488589, 0.7882440370012773, 0.5448041130002821, 0.14846222000051057, 0.4565485940038343, 0.8992598010008805, 0.39523368400114123, 0.30044454600283643, 0.3004564670045511, 0.25131852599588456, 0.2756907810035045, 0.6848557170014828, 0.20372581900301157, 0.20697063300031004, 0.89389702599874, 0.5178290580006433, 0.41828815899498295, 0.823766102999798, 0.054694177000783384, 0.7711484460014617, 0.14781909700104734, 0.1443931639951188, 0.0471010010005557, 0.2617640989992651, 0.28745080799853895, 0.3419974869975704, 0.7041302750003524, 0.5258600969973486, 0.2556146799979615, 0.28075728800467914, 0.0653032769987476, 0.44254716200521216, 0.17398568899807287, 0.2634856220029178, 0.49185326600127155, 0.7443784409988439, 0.6815544929995667, 0.13825511599861784, 0.26344116299878806, 0.3390488299992285, 0.283290973995463, 0.21308689999568742, 0.23810594099632, 0.11296830900391797, 0.08843266400072025, 0.6193896050026524, 0.4886357939976733, 0.1817463109982782, 1.107943761999195, 0.3007371299972874, 0.24090902900206856, 0.41728508100641193, 0.7155127840014757, 0.34584503000223776, 0.33148830400023144, 0.44114219900075113, 0.44258033300138777, 0.15747524999460438, 0.40539870299835457, 0.4945650299996487, 0.5707015250009135, 0.9119596189993899, 0.02470257499953732, 0.17612814099993557, 0.36799728099867934, 0.491410836999421, 0.22780110299936496, 0.5613578689954011, 0.310411883998313, 0.35165298500214703, 0.611317365001014, 0.5683702140013338, 0.27370311800041236, 0.3982960959983757, 0.4684735320042819, 0.2105476409997209, 0.14293501499923877, 0.7017155869980343, 0.5739239090034971, 0.06479388699517585, 0.6359221530001378, 0.9714689789980184, 0.0904029029989033, 0.7289731170021696, 0.31080886800191365, 0.6817028290024609, 0.07002585100417491, 0.360425134000252, 0.23138244399888208, 0.9764076999999816, 0.2988106129996595, 0.921719010999368, 0.5459266170000774, 0.22990230699360836, 0.08974442700127838, 0.06609993099846179, 0.9717142230001627, 1.4526100300063263, 0.6912513400020543, 0.25604508600372355, 0.9367785380018177, 0.4476799529948039, 0.18538488199556014, 1.1785002649994567, 0.026039477001177147, 0.4721466729970416, 1.0557106529959128, 0.35683940799935954, 0.4332769120010198, 0.2478627009986667, 0.1923370119984611, 0.6363900500000454, 0.2650367960013682, 0.7313418589983485, 0.2729429169994546, 0.12413570799981244, 0.6942657239997061, 0.6788543000002392, 0.6346254610034521, 0.06707981200452195, 0.8826428079992183, 0.1515571470008581, 0.34180735800327966, 0.21608584899513517, 0.575218780002615, 0.5337054310002713, 0.2097139619945665, 0.2735060860068188, 1.17971586099884, 0.42454186299437424, 0.4182616659963969, 0.03153332899819361, 0.5181745139998384, 1.2208792780002113, 0.5899233800009824, 0.8506585469949641, 0.3375732659987989, 0.5790790379978716, 0.29905787999450695, 0.07750224899791647, 0.059440703997097444, 0.546016881999094, 0.15477826199639821, 0.5154305760006537, 0.32119297399913194, 0.2147331509986543, 0.6733330849965569, 1.218435368995415, 1.4337618069985183, 0.42781627000658773, 0.19095006299903616, 0.33674866399815073, 0.5666585189974285, 0.7401898549942416, 0.31580411799950525, 0.5673931470009848, 0.04879990199697204, 0.08876002999750199, 0.4492026740044821, 0.43749643200135324, 0.4259631700042519, 1.2403500369982794, 0.4841967000029399, 1.6518829800043022, 0.10389948500233004, 0.5330939810010022, 0.366914996993728, 0.8758679180027684, 0.7015321760045481, 0.7973368410021067, 0.7910558930016123, 0.14818143400043482, 0.24184490399784409, 0.12012204000347992, 0.43281086099887034, 0.016014202999940608, 0.5664139210057328, 0.3290260389985633, 0.3588971860008314, 0.4410402579960646, 0.33784462200128473, 0.7199669830006314, 0.36501216999749886, 0.8581501770022442, 0.843339166000078, 0.1731976690061856, 0.8751021310017677, 0.2156040230038343, 0.8659407070008456, 0.16147382999770343, 0.28692305000004126, 0.9600184289956815, 0.09827681600290816, 0.36443558900646167, 1.2468807019977248, 0.7832267339981627, 0.7220454979978967, 5.892476387998613, 2.472916045997408, 0.3530137529960484, 1.773348665003141, 6.0727788290023454, 2.7928167290010606, 16.232411068005604, 11.778200259002915, 0.43714434999856167, 2.474827304999053, 1.0523673909992795, 6.81438612400234, 84.22846130199468, 5.447795945001417, 5.108003749999625, 1.7315646950009977, 4.375774852996983, 2.895518407000054, 4.937811957999656, 7.8530273840005975, 4.583288668996829, 7.342702419999114, 4.6620858070018585, 0.24201770000217948, 6.065475804993184, 7.273714719005511, 8.602667166000174, 6.481277037994005, 1.0846163390015136, 2.733522874004848, 1.872245054000814, 9.479215479004779, 5.377905195993662, 2.96277297600318, 20.630649730002915, 3.0576520939939655, 48.49868432799849, 37.07449536999775, 14.258297063002829, 1.023493603002862, 2.8381047250004485, 1.7635225699996226, 36.46847016099491, 24.655078572999628, 0.706025220999436, 1.573075414999039, 11.549602557999606, 4.1928628610039596, 0.9073846940009389] . new_times . [0.017141818003437947, 0.017242340996745043, 0.05674562099738978, 0.07640088799962541, 0.030929868000384886, 0.04040112000075169, 0.030577216995880008, 0.13632708899967838, 0.05200287199841114, 0.040281057998072356, 0.02985628099850146, 0.04327459100022679, 0.016351482998288702, 0.032556889003899414, 0.0764923530005035, 0.04889067100157263, 0.0400243589974707, 0.14160600600007456, 0.01708341400080826, 0.029182936996221542, 0.018667790995095856, 0.10116665300301975, 0.031018765999760944, 0.04263456500484608, 0.2178221799986204, 0.34482167700480204, 0.030698668997501954, 0.2453584739996586, 0.06478456199693028, 0.1806239639990963, 0.13754522099770838, 0.039879100004327483, 0.7945393740010331, 0.017875689998618327, 0.017053063005732838, 0.01729723500466207, 0.057233139996242244, 0.12221388000034494, 0.01687451099860482, 0.04011562099913135, 0.11827107199496822, 0.0168418799948995, 0.059265065006911755, 0.030168055003741756, 0.017755925000528805, 0.05888584100466687, 0.05684019000182161, 0.018326817000343, 0.04295713600004092, 0.018828028994903434, 0.03158652900310699, 0.3953480150012183, 0.030123609998554457, 0.10238311000284739, 0.21734078799636336, 0.07380036199901951, 0.04984209700342035, 0.030203914000594523, 0.030876814998919144, 0.022922450996702537, 0.03911368300032336, 0.031616309002856724, 0.0841468819999136, 0.017881004998343997, 0.04806271500274306, 0.08200644399767043, 0.04035458399448544, 0.018128998002794106, 0.01716515499720117, 0.1737939849990653, 0.030816856000456028, 0.04988094400323462, 0.01657509900542209, 0.016538344003492966, 0.0511174029961694, 0.01643907799734734, 0.034648752996872645, 0.04953630299860379, 0.06072068399953423, 0.03990688199701253, 0.01680587099690456, 0.016923716000746936, 0.0662847710045753, 0.08517424599995138, 0.0747116489947075, 0.040220359005616046, 0.04888104500423651, 0.02975428000354441, 0.04760440599784488, 0.048642952999216504, 0.04372295900247991, 0.32334415199875366, 0.016543102006835397, 0.0894804080016911, 0.07425258200237295, 0.33890768199489685, 0.033514918002765626, 0.03227024099760456, 0.1233237470005406, 0.03148100600083126, 0.03224854700238211, 0.06582293399696937, 0.03844630999810761, 0.04922862099920167, 0.048927815005299635, 0.04809423199912999, 0.1314717479981482, 0.04719468200346455, 0.0646399309989647, 0.05628081200120505, 0.031298634996346664, 0.03100051399815129, 0.03128486499917926, 0.017800642999645788, 0.10647089400299592, 0.05005720999906771, 0.04793643100128975, 0.08083214899670566, 0.0167784750010469, 0.05742631800239906, 0.029873840998334344, 0.050833222005167045, 0.030351857996720355, 0.031145086999458726, 0.14952126100251917, 0.05629108900029678, 0.05535287599923322, 0.01845699199475348, 0.03986398900451604, 0.048408488000859506, 0.03190274300141027, 0.03839217199856648, 0.03121863900014432, 0.06580089999624761, 0.06384146399796009, 0.07233441800053697, 0.0661255670056562, 0.07540044499910437, 0.03219398300279863, 0.047926511004334316, 0.04906252300133929, 0.030447222998191137, 0.040550468998844735, 0.01715786500426475, 0.10516372400161345, 0.017652869995799847, 0.017825312999775633, 0.01728857100533787, 0.03992790899792453, 0.047538904000248294, 0.017435919005947653, 0.029603600996779278, 0.01653392699518008, 0.041781653999350965, 0.059695195996027905, 0.041964879994338844, 0.030317204000311904, 0.420307763000892, 0.033670327997242566, 0.01736638899456011, 0.01685198199993465, 0.03159293699718546, 0.06576054900506278, 0.047391806001542136, 0.5829197670027497, 0.030338226999447215, 0.04744374900474213, 0.06974482900113799, 0.13979070099594537, 0.04102925099869026, 0.04429970699857222, 0.08129144400299992, 0.03373256800114177, 0.0164162419969216, 0.04082277300040005, 0.05028321599820629, 0.16946333600208163, 0.43843208299949765, 0.06685726300202077, 0.07399043400073424, 0.01723997000226518, 0.01697975199931534, 0.043790110998088494, 0.09400678000383778, 0.16008561899798224, 0.051294609998876695, 0.0313398389989743, 0.15295953700115206, 0.017819305001467, 0.01727833999757422, 0.0750670130000799, 0.030905343999620527, 0.04861300100310473, 0.20808659300382715, 0.43977029499365017, 0.0687944149976829, 0.03334920199995395, 0.040605338996101636, 0.09206686499965144, 0.031118084996705875, 0.31365217699931236, 0.04695206700125709, 0.017145388999779243, 0.04823647000011988, 0.01724498299881816, 0.05864844900497701, 0.1389246530015953, 0.04773515000124462, 0.04003746100352146, 0.017104911006754264, 0.06726991800678661, 0.03834269300568849, 0.034546567003417294, 0.043049342995800544, 0.03380808299698401, 0.07786301599844592, 0.03043458899628604, 0.03319624200230464, 0.039560028999403585, 0.05053323299944168, 0.060352332999173086, 0.0312467839976307, 0.04167778100236319, 0.030799749998550396, 0.11294742100290023, 0.623941145997378, 0.04170696599612711, 0.016606272001808975, 0.032065913001133595, 0.03121132000524085, 0.06593888199859066, 0.09923062800226035, 0.01655813099932857, 0.12873923900042428, 0.04906627099990146, 0.04877103300532326, 0.24746041600155877, 0.05712161600240506, 0.038567820003663655, 0.01694265100377379, 0.01698239499819465, 0.252966899999592, 0.07400482200318947, 0.07364553999650525, 0.03875172300467966, 0.28798529200139455, 0.10282520799955819, 0.031527086001005955, 0.030544155997631606, 0.05872778900084086, 0.01674626000021817, 0.02957532300206367, 0.1352009679976618, 0.01680638199468376, 0.09989797500020359, 0.10581996999826515, 0.030557701997167896, 0.10542034500394948, 0.01834036799846217, 0.017110793000028934, 0.01748218799912138, 0.04076658300618874, 0.18596284500381444, 0.02973518499493366, 0.03197177199763246, 0.03108700400480302, 0.01846843399835052, 0.017108321997511666, 0.2099409150032443, 0.07435493199591292, 0.24631729400425684, 0.04647991299862042, 0.6360231270009535, 0.03876886899524834, 0.031116824997297954, 0.016548126994166523, 0.775550366997777, 0.03987027399853105, 0.08827952299907338, 0.049840043000585865, 0.018065037998894695, 0.0663367970046238, 0.11434380099672126, 0.09858182400057558, 0.03221923499950208, 0.04879455000627786, 0.09093516100256238, 0.04084596599568613, 0.7046969060029369, 0.01658283799770288, 0.030003990003024228, 0.08169183999416418, 0.1325916369969491, 0.01748363399383379, 0.3624224130035145, 0.022409566001442727, 0.03905618700082414, 0.03104464299394749, 0.1790001339977607, 0.018113624995748978, 0.01679371399950469, 0.15055796100205043, 0.08124313200096367, 0.04767183500371175, 0.039704290000372566, 0.05061665399989579, 0.030753343002288602, 0.07601771999907214, 0.017407761995855253, 0.016605393000645563, 0.01753147700219415, 0.01767781200032914, 0.017319837999821175, 0.042646447000151966, 0.017095375995268114, 0.03151134899962926, 0.12460235999606084, 0.5670023299971945, 0.03890210799727356, 0.05221921899646986, 0.03170197500003269, 0.04551042299863184, 0.01819952399819158, 0.017880489998788107, 0.019098256998404395, 0.034508207005274016, 0.03551947500091046, 0.017384497994498815, 0.17992220099404221, 0.05402093800512375, 0.017856968006526586, 0.018421521002892405, 0.018739714003459085, 0.03276450400153408, 0.03347219799616141, 0.03312332399946172, 0.020764742002938874, 0.10553895500197541, 0.6936965429995325, 0.016202636004891247, 0.016428655995696317, 0.046714788004464936, 0.06189772400102811, 0.06459070300479652, 0.027321716996084433, 0.028935971000464633, 0.01740803299617255, 0.05683707199932542, 0.03757313100504689, 0.01664365699980408, 0.14697301300475374, 0.017957708005269524, 0.03777369599993108, 0.041529993002768606, 0.04859679500077618, 0.05558802599989576, 0.029096835998643655, 0.02902327499759849, 0.03003959899797337, 0.07176886100205593, 0.4783556039983523, 0.04311055799917085, 0.058644198994443286, 0.1690925180009799, 0.06589962099678814, 0.031056578001880553, 0.04296879699541023, 0.031551362000755034, 0.019800034999207128, 0.04245695400459226, 0.017644614999881014, 0.017402195000613574, 0.07686706299864454, 0.05202438800188247, 0.01785506099986378, 0.017015642995829694, 0.031453121002414264, 0.031678316998295486, 0.01689856000302825, 0.05661304700333858, 0.03188853599567665, 0.029647313996974844, 0.6903772180012311, 0.08274875099596102, 0.017605560999072623, 0.05756572200334631, 0.01657663899823092, 0.05842522699822439, 0.01658778600540245, 0.10617285400076071, 0.016474240997922607, 0.11465627099823905, 0.03112519699789118, 0.1237907569957315, 0.09730754100019112, 0.03204969000216806, 0.0314516310027102, 0.017656566997175105, 0.2526982310009771, 0.31934253800136503, 0.04360636599449208, 0.03313128399895504, 0.17292556199390674, 0.030202708003344014, 0.016334847998223267, 0.35155824899993604, 0.04237849800119875, 0.08678581000276608, 0.09653183699992951, 0.08410418000130448, 0.03794694500538753, 0.07397138600208564, 0.0300416120007867, 0.08619746699696407, 0.04073772499396, 0.061028289994283114, 0.21221090899780393, 0.05562177200044971, 0.09344798499660101, 0.07896981199883157, 0.04605019200243987, 0.017773555002349894, 0.09882005800318439, 0.01619118099915795, 0.029395833000307903, 0.029026850999798626, 0.0539779879982234, 0.048126499001227785, 0.028531529002066236, 0.02842477900412632, 0.3651196820064797, 0.0278065459933714, 0.1383705469997949, 0.01643713099474553, 0.038420181001129095, 0.3026728299955721, 0.16240877399832243, 0.07495543499680934, 0.03011955499823671, 0.0577959619986359, 0.03717858799791429, 0.01609021899639629, 0.016008325001166668, 0.12556096800108207, 0.01576626400492387, 0.04657738700188929, 0.05484015599358827, 0.028020375000778586, 0.046629151998786256, 0.15756302799854893, 0.3058374019965413, 0.030795491999015212, 0.017314117001660634, 0.018774796997604426, 0.051033044001087546, 0.10822067400295055, 0.17788628100242931, 0.05052897099812981, 0.017459918999520596, 0.01627463600016199, 0.0730355000050622, 0.04068288699636469, 0.0400915360005456, 0.2839775760003249, 0.08984737300488632, 0.2992191500015906, 0.029802575998473912, 0.038789985002949834, 0.033304103002592456, 0.08996923999802675, 0.06403642400255194, 0.05942392599536106, 0.0752470759980497, 0.018883910997828934, 0.01686675800010562, 0.01621682199765928, 0.03150773700326681, 0.017172263003885746, 0.029680515996005852, 0.02967979000095511, 0.06419510599516798, 0.05846488499810221, 0.017096126000978984, 0.13830898699961836, 0.03977755399682792, 0.05647802499879617, 0.0717799929989269, 0.03946109800017439, 0.06511147499986691, 0.01616050700249616, 0.03895841300254688, 0.04261506500188261, 0.06614242000068771, 0.08892890800052555, 0.02989560599962715, 0.03178281399596017, 0.16123898099613143, 0.30016237000381807, 0.04008586599957198, 0.09251366099488223, 0.018408017000183463, 0.03558696399704786, 0.017868684000859503, 0.05290022099507041, 0.018450222996762022, 0.24230418499791995, 0.11642257199855521, 0.027888520999113098, 0.04412609800056089, 0.02876369800651446, 0.05357337999885203, 1.7989341729989974, 0.033163297004648484, 0.14929789199959487, 0.03937884599872632, 0.04841808499622857, 0.01787777699792059, 0.04173661000095308, 0.08123099600197747, 0.05598412299877964, 0.055002588997012936, 0.07102082000346854, 0.01709342899994226, 0.19252427700121189, 0.0817211289977422, 0.14551942200341728, 0.04068493499653414, 0.04059933799726423, 0.048982587999489624, 0.049948136998864356, 0.13310851999995066, 0.031066747003933415, 0.03092864299833309, 0.2014404569999897, 0.04092723199573811, 0.6671478670032229, 5.599062446999596, 0.18391395999788074, 0.02651502799562877, 0.05853216700052144, 0.015459281996299978, 0.6047044439983438, 0.8593786319979699, 0.015039521000289824, 0.08121640799799934, 0.14135058000101708, 0.03602962100558216, 0.014914978004526347] . for i in range(len(new_times)): print((new_times[i],original_times[i])) . (0.017141818003437947, 0.33958439999696566) (0.017242340996745043, 0.16548814000270795) (0.05674562099738978, 0.23011897800461156) (0.07640088799962541, 0.5222397519974038) (0.030929868000384886, 0.3396739560048445) (0.04040112000075169, 0.37772370900347596) (0.030577216995880008, 0.4575193529963144) (0.13632708899967838, 0.39399613400019007) (0.05200287199841114, 0.5394558400003007) (0.040281057998072356, 0.6111482179985614) (0.02985628099850146, 0.353503410005942) (0.04327459100022679, 0.6477286830049707) (0.016351482998288702, 0.24683908600127324) (0.032556889003899414, 0.4274328460014658) (0.0764923530005035, 0.7626426830029231) (0.04889067100157263, 0.8359886129983352) (0.0400243589974707, 0.40523568999924464) (0.14160600600007456, 1.009283718005463) (0.01708341400080826, 0.09408632299891906) (0.029182936996221542, 0.27120610199926887) (0.018667790995095856, 0.21957699800259434) (0.10116665300301975, 0.9694350019999547) (0.031018765999760944, 0.5277370940020774) (0.04263456500484608, 0.6626742420048686) (0.2178221799986204, 1.4702940060014953) (0.34482167700480204, 1.6876647300014156) (0.030698668997501954, 0.5720190439969883) (0.2453584739996586, 0.13763106100668665) (0.06478456199693028, 0.8748115679991315) (0.1806239639990963, 0.9580560500035062) (0.13754522099770838, 0.9724534050037619) (0.039879100004327483, 0.6257250499984366) (0.7945393740010331, 0.8444051550031872) (0.017875689998618327, 0.10949817399523454) (0.017053063005732838, 0.14942241899552755) (0.01729723500466207, 0.04323479199956637) (0.057233139996242244, 0.8266701090033166) (0.12221388000034494, 0.4762422729982063) (0.01687451099860482, 0.0966187500016531) (0.04011562099913135, 0.6537467460002517) (0.11827107199496822, 1.039138569001807) (0.0168418799948995, 0.4482927870049025) (0.059265065006911755, 0.30094081700372044) (0.030168055003741756, 0.4337230019955314) (0.017755925000528805, 0.20038886000111233) (0.05888584100466687, 0.8755566610052483) (0.05684019000182161, 0.8141911819984671) (0.018326817000343, 0.1688337000014144) (0.04295713600004092, 0.13314665100187995) (0.018828028994903434, 0.2975124090007739) (0.03158652900310699, 0.3094483820023015) (0.3953480150012183, 0.26773773199965945) (0.030123609998554457, 0.26381719499477185) (0.10238311000284739, 0.6472694929980207) (0.21734078799636336, 0.6690413969990914) (0.07380036199901951, 0.4807489730010275) (0.04984209700342035, 0.58391760399536) (0.030203914000594523, 0.15514269700361183) (0.030876814998919144, 0.46672223300265614) (0.022922450996702537, 0.125550649005163) (0.03911368300032336, 0.40693560799991246) (0.031616309002856724, 0.4472526659956202) (0.0841468819999136, 0.6688588909964892) (0.017881004998343997, 0.2618485429993598) (0.04806271500274306, 0.2960022900006152) (0.08200644399767043, 0.252930351998657) (0.04035458399448544, 0.24921791100496193) (0.018128998002794106, 0.27863688900106354) (0.01716515499720117, 0.12840000000142027) (0.1737939849990653, 0.8475773280006251) (0.030816856000456028, 0.15563331399607705) (0.04988094400323462, 0.12904385300498689) (0.01657509900542209, 0.2870053509977879) (0.016538344003492966, 0.17544573699706234) (0.0511174029961694, 0.43691050399502274) (0.01643907799734734, 0.08763796599669149) (0.034648752996872645, 0.23305328899732558) (0.04953630299860379, 0.6684342559965444) (0.06072068399953423, 0.8273137709984439) (0.03990688199701253, 0.5223881999991136) (0.01680587099690456, 0.20511349300068105) (0.016923716000746936, 0.2921644260059111) (0.0662847710045753, 0.5212640469981125) (0.08517424599995138, 0.5878861279998091) (0.0747116489947075, 0.6797150260026683) (0.040220359005616046, 0.39575879699987127) (0.04888104500423651, 0.62680720800563) (0.02975428000354441, 0.14995748300134437) (0.04760440599784488, 0.4119616430034512) (0.048642952999216504, 0.13107936000596965) (0.04372295900247991, 0.34012338599859504) (0.32334415199875366, 0.20755092000035802) (0.016543102006835397, 0.10307408200606005) (0.0894804080016911, 0.33281501199962804) (0.07425258200237295, 0.872544611003832) (0.33890768199489685, 0.9519099400058622) (0.033514918002765626, 0.23331132500607055) (0.03227024099760456, 0.17966820199944777) (0.1233237470005406, 0.5834245070000179) (0.03148100600083126, 0.2576556299973163) (0.03224854700238211, 0.09336502299993299) (0.06582293399696937, 0.8693224870003178) (0.03844630999810761, 0.359337305999361) (0.04922862099920167, 0.5366655260004336) (0.048927815005299635, 0.21122118199855322) (0.04809423199912999, 0.08891067500371719) (0.1314717479981482, 0.6548217540039332) (0.04719468200346455, 0.3850572139999713) (0.0646399309989647, 0.2009216730002663) (0.05628081200120505, 0.2650717619981151) (0.031298634996346664, 0.20691202299349243) (0.03100051399815129, 0.4712494150007842) (0.03128486499917926, 0.3966181210053037) (0.017800642999645788, 0.29327282099984586) (0.10647089400299592, 0.9231190889986465) (0.05005720999906771, 0.04179662299429765) (0.04793643100128975, 0.6978568589984206) (0.08083214899670566, 0.21682434499962255) (0.0167784750010469, 0.22633505199337378) (0.05742631800239906, 0.7838587590013049) (0.029873840998334344, 0.4628433280013269) (0.050833222005167045, 0.6207597839966184) (0.030351857996720355, 0.43183791599585675) (0.031145086999458726, 0.39952484600507887) (0.14952126100251917, 0.7016051860045991) (0.05629108900029678, 0.2892651520014624) (0.05535287599923322, 0.7232046409990289) (0.01845699199475348, 0.04837635900184978) (0.03986398900451604, 0.3491847309996956) (0.048408488000859506, 0.16339272799814353) (0.03190274300141027, 0.31603918399923714) (0.03839217199856648, 0.22790215400164016) (0.03121863900014432, 0.3598749860029784) (0.06580089999624761, 0.27306018699891865) (0.06384146399796009, 0.13044844399701105) (0.07233441800053697, 0.16135130600014236) (0.0661255670056562, 0.6633860520014423) (0.07540044499910437, 0.5254012890000013) (0.03219398300279863, 0.037716844999522436) (0.047926511004334316, 0.5852374500027508) (0.04906252300133929, 0.3916825459964457) (0.030447222998191137, 0.5171037140025874) (0.040550468998844735, 0.7633689249996678) (0.01715786500426475, 0.1991189230029704) (0.10516372400161345, 0.8708832850024919) (0.017652869995799847, 0.27057942999817897) (0.017825312999775633, 0.3713073010003427) (0.01728857100533787, 0.07850544399843784) (0.03992790899792453, 0.6069479969955864) (0.047538904000248294, 0.791101319999143) (0.017435919005947653, 0.07351419300539419) (0.029603600996779278, 0.08563757699448615) (0.01653392699518008, 0.32722333000128856) (0.041781653999350965, 0.3739603630019701) (0.059695195996027905, 0.8154399960039882) (0.041964879994338844, 0.6883548879995942) (0.030317204000311904, 0.467424492999271) (0.420307763000892, 0.325693967002735) (0.033670327997242566, 0.35737453999900026) (0.01736638899456011, 0.3570726399993873) (0.01685198199993465, 0.16381557800195878) (0.03159293699718546, 0.04007773600460496) (0.06576054900506278, 0.10954430099809542) (0.047391806001542136, 0.552784856998187) (0.5829197670027497, 0.5003617319962359) (0.030338226999447215, 0.1040122659978806) (0.04744374900474213, 0.35923704800370615) (0.06974482900113799, 0.7549705710043781) (0.13979070099594537, 0.5928710350053734) (0.04102925099869026, 0.4180880550047732) (0.04429970699857222, 0.7714433099972666) (0.08129144400299992, 0.5389071109966608) (0.03373256800114177, 0.33985805100383004) (0.0164162419969216, 0.4154714600008447) (0.04082277300040005, 0.3066134110049461) (0.05028321599820629, 0.17489410300186137) (0.16946333600208163, 0.6954020539997146) (0.43843208299949765, 0.3270981569949072) (0.06685726300202077, 0.49412456300342456) (0.07399043400073424, 0.5601098619954428) (0.01723997000226518, 0.17214227200020105) (0.01697975199931534, 0.4435488329982036) (0.043790110998088494, 0.6922573310002917) (0.09400678000383778, 0.6959242719967733) (0.16008561899798224, 0.3332012820028467) (0.051294609998876695, 0.7843402899961802) (0.0313398389989743, 0.41190371200355) (0.15295953700115206, 0.8710792109995964) (0.017819305001467, 0.39652914500038605) (0.01727833999757422, 0.1528286989996559) (0.0750670130000799, 0.9198123390015098) (0.030905343999620527, 0.30307782199815847) (0.04861300100310473, 0.38907158399524633) (0.20808659300382715, 1.0557739559953916) (0.43977029499365017, 0.3133920449981815) (0.0687944149976829, 0.5239419630015618) (0.03334920199995395, 0.45524540500628063) (0.040605338996101636, 0.4674780280038249) (0.09206686499965144, 0.7778845529974205) (0.031118084996705875, 0.3911934080024366) (0.31365217699931236, 1.4066990670035011) (0.04695206700125709, 0.7733066419968964) (0.017145388999779243, 0.125308220005536) (0.04823647000011988, 0.10504128300090088) (0.01724498299881816, 0.03353736699500587) (0.05864844900497701, 0.42152397600148106) (0.1389246530015953, 1.165176361995691) (0.04773515000124462, 0.3120960960004595) (0.04003746100352146, 0.39817946500261314) (0.017104911006754264, 0.25570005000190577) (0.06726991800678661, 0.5634463439928368) (0.03834269300568849, 0.3336227539984975) (0.034546567003417294, 0.44399674600572325) (0.043049342995800544, 0.6780812239958323) (0.03380808299698401, 0.3409683989957557) (0.07786301599844592, 0.7484515530013596) (0.03043458899628604, 0.46945574400160694) (0.03319624200230464, 0.1438161059995764) (0.039560028999403585, 0.49652725699706934) (0.05053323299944168, 0.7296694300021045) (0.060352332999173086, 0.11558041800162755) (0.0312467839976307, 0.4098267199951806) (0.04167778100236319, 0.6135215169997537) (0.030799749998550396, 0.6322866839982453) (0.11294742100290023, 0.3209687449998455) (0.623941145997378, 0.5599376629979815) (0.04170696599612711, 0.6197811889942386) (0.016606272001808975, 0.2866238000060548) (0.032065913001133595, 0.5415079590020468) (0.03121132000524085, 0.15105901600327343) (0.06593888199859066, 0.6002329699986149) (0.09923062800226035, 0.35456149299716344) (0.01655813099932857, 0.057419669996306766) (0.12873923900042428, 0.5259204899994074) (0.04906627099990146, 0.2638515459984774) (0.04877103300532326, 0.7201050930016208) (0.24746041600155877, 1.6567683479952393) (0.05712161600240506, 0.4275186869999743) (0.038567820003663655, 0.6507032360023004) (0.01694265100377379, 0.06083877899800427) (0.01698239499819465, 0.2710633050010074) (0.252966899999592, 1.2327983369978028) (0.07400482200318947, 0.5265295040007913) (0.07364553999650525, 0.16111232899856986) (0.03875172300467966, 0.38278875799733214) (0.28798529200139455, 1.7259089209983358) (0.10282520799955819, 0.21335401200485649) (0.031527086001005955, 0.31754741499753436) (0.030544155997631606, 0.1615486989976489) (0.05872778900084086, 0.3656402050037286) (0.01674626000021817, 0.4374432429976878) (0.02957532300206367, 0.1399645679994137) (0.1352009679976618, 1.056893383996794) (0.01680638199468376, 0.1781966049966286) (0.09989797500020359, 0.9175565109981108) (0.10581996999826515, 0.768117125997378) (0.030557701997167896, 0.15266383499692893) (0.10542034500394948, 0.782494430000952) (0.01834036799846217, 0.28913872400153195) (0.017110793000028934, 0.12431982899579452) (0.01748218799912138, 0.25555375600379193) (0.04076658300618874, 0.22714756600180408) (0.18596284500381444, 0.970837239001412) (0.02973518499493366, 0.5446924390053027) (0.03197177199763246, 0.28500564800197026) (0.03108700400480302, 0.3486387469965848) (0.01846843399835052, 0.24569822400371777) (0.017108321997511666, 0.11449482800526312) (0.2099409150032443, 0.2549562239946681) (0.07435493199591292, 0.5602027049972094) (0.24631729400425684, 1.5371294349970412) (0.04647991299862042, 0.8432077469988144) (0.6360231270009535, 0.5967279770047753) (0.03876886899524834, 0.3285177540019504) (0.031116824997297954, 0.362989296001615) (0.016548126994166523, 0.03660589400533354) (0.775550366997777, 0.8168800010025734) (0.03987027399853105, 0.7912411970028188) (0.08827952299907338, 0.5660358709938009) (0.049840043000585865, 0.2648252319995663) (0.018065037998894695, 0.24534482799936086) (0.0663367970046238, 0.6817791470020893) (0.11434380099672126, 1.1066477690037573) (0.09858182400057558, 0.9497226820021751) (0.03221923499950208, 0.24334721500054002) (0.04879455000627786, 0.3132236509991344) (0.09093516100256238, 0.918592305999482) (0.04084596599568613, 0.5408868169979542) (0.7046969060029369, 0.6944283399934648) (0.01658283799770288, 0.38920057600626023) (0.030003990003024228, 0.33785404299851507) (0.08169183999416418, 0.20822352699906332) (0.1325916369969491, 0.05746299099700991) (0.01748363399383379, 0.2684560429988778) (0.3624224130035145, 0.24537883499579038) (0.022409566001442727, 0.2624187389956205) (0.03905618700082414, 0.24622401999658905) (0.03104464299394749, 0.2601159909972921) (0.1790001339977607, 1.23781903499912) (0.018113624995748978, 0.07310912800312508) (0.01679371399950469, 0.23733678400458302) (0.15055796100205043, 1.0055679889992462) (0.08124313200096367, 0.19442468000488589) (0.04767183500371175, 0.7882440370012773) (0.039704290000372566, 0.5448041130002821) (0.05061665399989579, 0.14846222000051057) (0.030753343002288602, 0.4565485940038343) (0.07601771999907214, 0.8992598010008805) (0.017407761995855253, 0.39523368400114123) (0.016605393000645563, 0.30044454600283643) (0.01753147700219415, 0.3004564670045511) (0.01767781200032914, 0.25131852599588456) (0.017319837999821175, 0.2756907810035045) (0.042646447000151966, 0.6848557170014828) (0.017095375995268114, 0.20372581900301157) (0.03151134899962926, 0.20697063300031004) (0.12460235999606084, 0.89389702599874) (0.5670023299971945, 0.5178290580006433) (0.03890210799727356, 0.41828815899498295) (0.05221921899646986, 0.823766102999798) (0.03170197500003269, 0.054694177000783384) (0.04551042299863184, 0.7711484460014617) (0.01819952399819158, 0.14781909700104734) (0.017880489998788107, 0.1443931639951188) (0.019098256998404395, 0.0471010010005557) (0.034508207005274016, 0.2617640989992651) (0.03551947500091046, 0.28745080799853895) (0.017384497994498815, 0.3419974869975704) (0.17992220099404221, 0.7041302750003524) (0.05402093800512375, 0.5258600969973486) (0.017856968006526586, 0.2556146799979615) (0.018421521002892405, 0.28075728800467914) (0.018739714003459085, 0.0653032769987476) (0.03276450400153408, 0.44254716200521216) (0.03347219799616141, 0.17398568899807287) (0.03312332399946172, 0.2634856220029178) (0.020764742002938874, 0.49185326600127155) (0.10553895500197541, 0.7443784409988439) (0.6936965429995325, 0.6815544929995667) (0.016202636004891247, 0.13825511599861784) (0.016428655995696317, 0.26344116299878806) (0.046714788004464936, 0.3390488299992285) (0.06189772400102811, 0.283290973995463) (0.06459070300479652, 0.21308689999568742) (0.027321716996084433, 0.23810594099632) (0.028935971000464633, 0.11296830900391797) (0.01740803299617255, 0.08843266400072025) (0.05683707199932542, 0.6193896050026524) (0.03757313100504689, 0.4886357939976733) (0.01664365699980408, 0.1817463109982782) (0.14697301300475374, 1.107943761999195) (0.017957708005269524, 0.3007371299972874) (0.03777369599993108, 0.24090902900206856) (0.041529993002768606, 0.41728508100641193) (0.04859679500077618, 0.7155127840014757) (0.05558802599989576, 0.34584503000223776) (0.029096835998643655, 0.33148830400023144) (0.02902327499759849, 0.44114219900075113) (0.03003959899797337, 0.44258033300138777) (0.07176886100205593, 0.15747524999460438) (0.4783556039983523, 0.40539870299835457) (0.04311055799917085, 0.4945650299996487) (0.058644198994443286, 0.5707015250009135) (0.1690925180009799, 0.9119596189993899) (0.06589962099678814, 0.02470257499953732) (0.031056578001880553, 0.17612814099993557) (0.04296879699541023, 0.36799728099867934) (0.031551362000755034, 0.491410836999421) (0.019800034999207128, 0.22780110299936496) (0.04245695400459226, 0.5613578689954011) (0.017644614999881014, 0.310411883998313) (0.017402195000613574, 0.35165298500214703) (0.07686706299864454, 0.611317365001014) (0.05202438800188247, 0.5683702140013338) (0.01785506099986378, 0.27370311800041236) (0.017015642995829694, 0.3982960959983757) (0.031453121002414264, 0.4684735320042819) (0.031678316998295486, 0.2105476409997209) (0.01689856000302825, 0.14293501499923877) (0.05661304700333858, 0.7017155869980343) (0.03188853599567665, 0.5739239090034971) (0.029647313996974844, 0.06479388699517585) (0.6903772180012311, 0.6359221530001378) (0.08274875099596102, 0.9714689789980184) (0.017605560999072623, 0.0904029029989033) (0.05756572200334631, 0.7289731170021696) (0.01657663899823092, 0.31080886800191365) (0.05842522699822439, 0.6817028290024609) (0.01658778600540245, 0.07002585100417491) (0.10617285400076071, 0.360425134000252) (0.016474240997922607, 0.23138244399888208) (0.11465627099823905, 0.9764076999999816) (0.03112519699789118, 0.2988106129996595) (0.1237907569957315, 0.921719010999368) (0.09730754100019112, 0.5459266170000774) (0.03204969000216806, 0.22990230699360836) (0.0314516310027102, 0.08974442700127838) (0.017656566997175105, 0.06609993099846179) (0.2526982310009771, 0.9717142230001627) (0.31934253800136503, 1.4526100300063263) (0.04360636599449208, 0.6912513400020543) (0.03313128399895504, 0.25604508600372355) (0.17292556199390674, 0.9367785380018177) (0.030202708003344014, 0.4476799529948039) (0.016334847998223267, 0.18538488199556014) (0.35155824899993604, 1.1785002649994567) (0.04237849800119875, 0.026039477001177147) (0.08678581000276608, 0.4721466729970416) (0.09653183699992951, 1.0557106529959128) (0.08410418000130448, 0.35683940799935954) (0.03794694500538753, 0.4332769120010198) (0.07397138600208564, 0.2478627009986667) (0.0300416120007867, 0.1923370119984611) (0.08619746699696407, 0.6363900500000454) (0.04073772499396, 0.2650367960013682) (0.061028289994283114, 0.7313418589983485) (0.21221090899780393, 0.2729429169994546) (0.05562177200044971, 0.12413570799981244) (0.09344798499660101, 0.6942657239997061) (0.07896981199883157, 0.6788543000002392) (0.04605019200243987, 0.6346254610034521) (0.017773555002349894, 0.06707981200452195) (0.09882005800318439, 0.8826428079992183) (0.01619118099915795, 0.1515571470008581) (0.029395833000307903, 0.34180735800327966) (0.029026850999798626, 0.21608584899513517) (0.0539779879982234, 0.575218780002615) (0.048126499001227785, 0.5337054310002713) (0.028531529002066236, 0.2097139619945665) (0.02842477900412632, 0.2735060860068188) (0.3651196820064797, 1.17971586099884) (0.0278065459933714, 0.42454186299437424) (0.1383705469997949, 0.4182616659963969) (0.01643713099474553, 0.03153332899819361) (0.038420181001129095, 0.5181745139998384) (0.3026728299955721, 1.2208792780002113) (0.16240877399832243, 0.5899233800009824) (0.07495543499680934, 0.8506585469949641) (0.03011955499823671, 0.3375732659987989) (0.0577959619986359, 0.5790790379978716) (0.03717858799791429, 0.29905787999450695) (0.01609021899639629, 0.07750224899791647) (0.016008325001166668, 0.059440703997097444) (0.12556096800108207, 0.546016881999094) (0.01576626400492387, 0.15477826199639821) (0.04657738700188929, 0.5154305760006537) (0.05484015599358827, 0.32119297399913194) (0.028020375000778586, 0.2147331509986543) (0.046629151998786256, 0.6733330849965569) (0.15756302799854893, 1.218435368995415) (0.3058374019965413, 1.4337618069985183) (0.030795491999015212, 0.42781627000658773) (0.017314117001660634, 0.19095006299903616) (0.018774796997604426, 0.33674866399815073) (0.051033044001087546, 0.5666585189974285) (0.10822067400295055, 0.7401898549942416) (0.17788628100242931, 0.31580411799950525) (0.05052897099812981, 0.5673931470009848) (0.017459918999520596, 0.04879990199697204) (0.01627463600016199, 0.08876002999750199) (0.0730355000050622, 0.4492026740044821) (0.04068288699636469, 0.43749643200135324) (0.0400915360005456, 0.4259631700042519) (0.2839775760003249, 1.2403500369982794) (0.08984737300488632, 0.4841967000029399) (0.2992191500015906, 1.6518829800043022) (0.029802575998473912, 0.10389948500233004) (0.038789985002949834, 0.5330939810010022) (0.033304103002592456, 0.366914996993728) (0.08996923999802675, 0.8758679180027684) (0.06403642400255194, 0.7015321760045481) (0.05942392599536106, 0.7973368410021067) (0.0752470759980497, 0.7910558930016123) (0.018883910997828934, 0.14818143400043482) (0.01686675800010562, 0.24184490399784409) (0.01621682199765928, 0.12012204000347992) (0.03150773700326681, 0.43281086099887034) (0.017172263003885746, 0.016014202999940608) (0.029680515996005852, 0.5664139210057328) (0.02967979000095511, 0.3290260389985633) (0.06419510599516798, 0.3588971860008314) (0.05846488499810221, 0.4410402579960646) (0.017096126000978984, 0.33784462200128473) (0.13830898699961836, 0.7199669830006314) (0.03977755399682792, 0.36501216999749886) (0.05647802499879617, 0.8581501770022442) (0.0717799929989269, 0.843339166000078) (0.03946109800017439, 0.1731976690061856) (0.06511147499986691, 0.8751021310017677) (0.01616050700249616, 0.2156040230038343) (0.03895841300254688, 0.8659407070008456) (0.04261506500188261, 0.16147382999770343) (0.06614242000068771, 0.28692305000004126) (0.08892890800052555, 0.9600184289956815) (0.02989560599962715, 0.09827681600290816) (0.03178281399596017, 0.36443558900646167) (0.16123898099613143, 1.2468807019977248) (0.30016237000381807, 0.7832267339981627) (0.04008586599957198, 0.7220454979978967) (0.09251366099488223, 5.892476387998613) (0.018408017000183463, 2.472916045997408) (0.03558696399704786, 0.3530137529960484) (0.017868684000859503, 1.773348665003141) (0.05290022099507041, 6.0727788290023454) (0.018450222996762022, 2.7928167290010606) (0.24230418499791995, 16.232411068005604) (0.11642257199855521, 11.778200259002915) (0.027888520999113098, 0.43714434999856167) (0.04412609800056089, 2.474827304999053) (0.02876369800651446, 1.0523673909992795) (0.05357337999885203, 6.81438612400234) (1.7989341729989974, 84.22846130199468) (0.033163297004648484, 5.447795945001417) (0.14929789199959487, 5.108003749999625) (0.03937884599872632, 1.7315646950009977) (0.04841808499622857, 4.375774852996983) (0.01787777699792059, 2.895518407000054) (0.04173661000095308, 4.937811957999656) (0.08123099600197747, 7.8530273840005975) (0.05598412299877964, 4.583288668996829) (0.055002588997012936, 7.342702419999114) (0.07102082000346854, 4.6620858070018585) (0.01709342899994226, 0.24201770000217948) (0.19252427700121189, 6.065475804993184) (0.0817211289977422, 7.273714719005511) (0.14551942200341728, 8.602667166000174) (0.04068493499653414, 6.481277037994005) (0.04059933799726423, 1.0846163390015136) (0.048982587999489624, 2.733522874004848) (0.049948136998864356, 1.872245054000814) (0.13310851999995066, 9.479215479004779) (0.031066747003933415, 5.377905195993662) (0.03092864299833309, 2.96277297600318) (0.2014404569999897, 20.630649730002915) (0.04092723199573811, 3.0576520939939655) (0.6671478670032229, 48.49868432799849) (5.599062446999596, 37.07449536999775) (0.18391395999788074, 14.258297063002829) (0.02651502799562877, 1.023493603002862) (0.05853216700052144, 2.8381047250004485) (0.015459281996299978, 1.7635225699996226) (0.6047044439983438, 36.46847016099491) (0.8593786319979699, 24.655078572999628) (0.015039521000289824, 0.706025220999436) (0.08121640799799934, 1.573075414999039) (0.14135058000101708, 11.549602557999606) (0.03602962100558216, 4.1928628610039596) (0.014914978004526347, 0.9073846940009389) . It is my conclusion that the new function is significantly faster using the new function. . for i in range(1,50): max_card = 1000 set_a_card = randint(20, max_card) offset = randint(1,max_card) set_b_card = randint(set_a_card + 1, set_a_card + offset) graph = random_bipartite(set_a_card, set_b_card) original_times.append(timeit.timeit(setup=original_setup, stmt=original_func_test, number=1000)) new_times.append(timeit.timeit(setup=new_func_setup, stmt=new_func_test, number=1000)) . class BipartiteGraph: def __init__(self, set_a, set_b): &quot;&quot;&quot; Constructor a bipartite graph. :param set_a_card: The cardinality of set_a. :param set_b_card: The cardinality of set_b. :return: A bipartite graph with nodes from set_a and set_b. Initial graph has no edges. &quot;&quot;&quot; self.set_a = set_a self.set_b = set_b # creates a new empty list for each dog bipart = nx.Graph() bipart.add_nodes_from(set_a, bipartite=0) bipart.add_nodes_from(set_b, bipartite=1) for num in set_a: vert = randrange(set_a_card, set_b_card) bipart.add_edge(num, vert) return bipart . set_a_card = randint(1, 1000) offset = randint(2,1000) set_b_card = randint(set_a_card + 1, set_a_card + offset) graph = random_bipartite(set_a_card, set_b_card) . def create_times_df(num_enteries = 50, max_card = 20, min_card = 1, min_enteries = 1): df = pd.DataFrame(columns=[&quot;original_func_time&quot;, &quot;new_func_time&quot; , &quot;set_a_card&quot;, &quot;set_b_card&quot;, &quot;num_edges&quot;, &quot;num_verticies&quot;, &quot;min_card&quot;, &quot;max_card&quot;]) for i in range(min_enteries, num_enteries): set_a_card = randint(min_card, max_card) offset = randint(min_enteries, max_card) set_b_card = randint(set_a_card + 1, set_a_card + offset) graph = random_bipartite(set_a_card, set_b_card) num_verticies = len(graph) num_edges = graph.number_of_edges() original_time = timeit.timeit(setup=original_setup, stmt=original_func_test, number=100) new_time = (timeit.timeit(setup=new_func_setup, stmt=new_func_test, number=100)) series = { &quot;original_func_time&quot;: original_time, &quot;new_func_time&quot;: new_time, &quot;set_a_card&quot;: set_a_card, &quot;set_b_card&quot;: set_b_card, &quot;num_edges&quot;: num_edges, &quot;num_verticies&quot;: num_verticies, &quot;min_card&quot;: min_card, &quot;max_card&quot;: max_card, } df = df.append(series, ignore_index=True) return df . for i in range(1,50): max_card = 1000 set_a_card = randint(2, max_card) offset = randint(1,max_card) set_b_card = randint(set_a_card + 1, set_a_card + offset) graph = random_bipartite(set_a_card, set_b_card) original_times.append(timeit.timeit(setup=original_setup, stmt=original_func_test, number=1000)) new_times.append(timeit.timeit(setup=new_func_setup, stmt=new_func_test, number=1000)) . NameError Traceback (most recent call last) &lt;ipython-input-27-96794709ffe6&gt; in &lt;module&gt; 5 set_b_card = randint(set_a_card + 1, set_a_card + offset) 6 graph = random_bipartite(set_a_card, set_b_card) -&gt; 7 original_times.append(timeit.timeit(setup=original_setup, stmt=original_func_test, number=1000)) 8 new_times.append(timeit.timeit(setup=new_func_setup, stmt=new_func_test, number=1000)) NameError: name &#39;original_times&#39; is not defined . df = create_times_df() df.head() . original_func_time new_func_time set_a_card set_b_card num_edges num_verticies min_card max_card . 0 0.361845 | 0.002024 | 4.0 | 6.0 | 3.0 | 5.0 | 1.0 | 20.0 | . 1 0.329904 | 0.001772 | 8.0 | 12.0 | 7.0 | 11.0 | 1.0 | 20.0 | . 2 0.398371 | 0.002256 | 6.0 | 25.0 | 5.0 | 24.0 | 1.0 | 20.0 | . 3 0.393551 | 0.001765 | 11.0 | 27.0 | 10.0 | 26.0 | 1.0 | 20.0 | . 4 0.339933 | 0.001617 | 8.0 | 9.0 | 7.0 | 8.0 | 1.0 | 20.0 | . df[&#39;new_func_time&#39;].hist() . &lt;AxesSubplot:&gt; . df[&#39;original_func_time&#39;].hist() . &lt;AxesSubplot:&gt; . df.plot.scatter(x=&#39;num_verticies&#39;, y=&#39;original_func_time&#39;) . &lt;AxesSubplot:xlabel=&#39;num_verticies&#39;, ylabel=&#39;original_func_time&#39;&gt; . df.plot.scatter(x=&#39;num_verticies&#39;, y=&#39;new_func_time&#39;) . &lt;AxesSubplot:xlabel=&#39;num_verticies&#39;, ylabel=&#39;new_func_time&#39;&gt; . df = create_times_df(num_enteries=500) df.head() . original_func_time new_func_time set_a_card set_b_card num_edges num_verticies min_card max_card . 0 0.353503 | 0.002105 | 2.0 | 3.0 | 1.0 | 2.0 | 1.0 | 20.0 | . 1 0.313718 | 0.001745 | 17.0 | 19.0 | 16.0 | 18.0 | 1.0 | 20.0 | . 2 0.366061 | 0.002085 | 8.0 | 11.0 | 7.0 | 10.0 | 1.0 | 20.0 | . 3 0.399565 | 0.002080 | 1.0 | 4.0 | 0.0 | 3.0 | 1.0 | 20.0 | . 4 0.374958 | 0.001653 | 7.0 | 8.0 | 6.0 | 7.0 | 1.0 | 20.0 | . df[&#39;new_func_time&#39;].hist(figsize = (10,15), legend=True) . &lt;AxesSubplot:&gt; . df[&#39;original_func_time&#39;].hist(figsize = (10,15), legend=True) . &lt;AxesSubplot:&gt; . df.plot.scatter(x=&#39;num_verticies&#39;, y=&#39;original_func_time&#39;, legend=True) . &lt;AxesSubplot:xlabel=&#39;num_verticies&#39;, ylabel=&#39;original_func_time&#39;&gt; . df.plot.scatter(x=&#39;num_verticies&#39;, y=&#39;new_func_time&#39;, legend=True) . &lt;AxesSubplot:xlabel=&#39;num_verticies&#39;, ylabel=&#39;new_func_time&#39;&gt; . ax1 = df.plot(kind=&#39;scatter&#39;, x=&#39;num_verticies&#39;, y=&#39;original_func_time&#39;, color=&#39;r&#39;) ax2 = df.plot(kind=&#39;scatter&#39;, x=&#39;num_verticies&#39;, y=&#39;new_func_time&#39;, color=&#39;g&#39;, ax=ax1) .",
            "url": "https://jdclifton2.github.io/blog/2021/03/23/Timing-Functions.html",
            "relUrl": "/2021/03/23/Timing-Functions.html",
            "date": " • Mar 23, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Writing Networkx Functions",
            "content": "import sys !{sys.executable} -m pip install networkx . Requirement already satisfied: networkx in /usr/local/lib/python3.6/dist-packages (2.5) Requirement already satisfied: decorator&gt;=4.3.0 in /usr/local/lib/python3.6/dist-packages (from networkx) (4.4.2) . import networkx as nx import unittest as ut . def n_distance_neighbors(G, start_node, distance): &quot;&quot;&quot; This function takes in a graph, starting node, and a distance. It will traverse the graph from the starting node and find all the neighbors within the distance where distance between two vertices in a graph is the number of edges in a shortest path. :param G: A networkx graph. :param start_node: The starting point. Distance from this node. Must be in G. :param distance: The distance to find neighbors within. :return: A list of vertices within specified distance. :rtype: List &quot;&quot;&quot; neighbors = [] nodes = nx.single_source_shortest_path_length(G,start_node,distance) for x in nodes: if nodes[x] &lt;= distance: neighbors.append(x) return neighbors . class TestNeighbors(ut.TestCase): def test_distance_two_simple_graph(self): G = nx.Graph() G.add_edges_from([(1, 2), (1, 3),(1,4),(2,5),(5,6),(6,7)]) result = n_distance_neighbors(G, 1, 2) answer = [1,2,3,4,5] self.assertEqual(result, answer) def test_distance_three_simple_graph(self): G = nx.Graph() G.add_edges_from([(1, 2), (1, 3),(1,4),(2,5),(5,6),(6,7)]) result = n_distance_neighbors(G, 1, 3) answer = [1,2,3,4,5,6] self.assertEqual(result, answer) def test_distance_three_simple_graph(self): G = nx.Graph() G.add_edges_from([(1, 2), (1, 3),(1,4),(2,5),(5,6),(6,7)]) result = n_distance_neighbors(G, 1, 4) answer = [1,2,3,4,5,6,7] self.assertEqual(result, answer) def test_distance_three_simple_graph(self): G = nx.Graph() G.add_edges_from([(1, 2), (1, 3),(1,4),(2,5),(5,6),(6,7)]) result = n_distance_neighbors(G, 1, 4) answer = [1,2,3,4,5,6,7] self.assertEqual(result, answer) def test_distance_two_complex_graph(self): G = nx.Graph() G.add_edges_from([(1, 2), (1, 3),(1,9), (2,3), (2,4), (2,5), (2,8), (3,6), (4,5), (4,12), (4,13),(6,7), (7,8), (9,10), (10,11), (11,12), (13,14), (14,15), (14,17),(15,16) ]) result = n_distance_neighbors(G, 1, 2) result.sort() answer = [1,2,3,4,5,6,8,9, 10] self.assertEqual(result, answer) def test_distance_three_complex_graph(self): G = nx.Graph() G.add_edges_from([(1, 2), (1, 3),(1,9), (2,3), (2,4), (2,5), (2,8), (3,6), (4,5), (4,12), (4,13),(6,7), (7,8), (9,10), (10,11), (11,12), (13,14), (14,15), (14,17),(15,16) ]) result = n_distance_neighbors(G, 1, 3) result.sort() answer = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] self.assertEqual(result, answer) def test_distance_four_complex_graph(self): G = nx.Graph() G.add_edges_from([(1, 2), (1, 3),(1,9), (2,3), (2,4), (2,5), (2,8), (3,6), (4,5), (4,12), (4,13),(6,7), (7,8), (9,10), (10,11), (11,12), (13,14), (14,15), (14,17),(15,16) ]) result = n_distance_neighbors(G, 1, 4) result.sort() answer = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,14] self.assertEqual(result, answer) def test_distance_five_complex_graph(self): G = nx.Graph() G.add_edges_from([(1, 2), (1, 3),(1,9), (2,3), (2,4), (2,5), (2,8), (3,6), (4,5), (4,12), (4,13),(6,7), (7,8), (9,10), (10,11), (11,12), (13,14), (14,15), (14,17),(15,16) ]) result = n_distance_neighbors(G, 1, 5) result.sort() answer = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17] self.assertEqual(result, answer) def test_distance_six_complex_graph(self): G = nx.Graph() G.add_edges_from([(1, 2), (1, 3),(1,9), (2,3), (2,4), (2,5), (2,8), (3,6), (4,5), (4,12), (4,13),(6,7), (7,8), (9,10), (10,11), (11,12), (13,14), (14,15), (14,17),(15,16) ]) result = n_distance_neighbors(G, 1, 6) result.sort() answer = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] self.assertEqual(result, answer) ut.main(argv=[&#39;&#39;], exit=False) . ....... - Ran 7 tests in 0.008s OK . &lt;unittest.main.TestProgram at 0x7fe7c4594860&gt; .",
            "url": "https://jdclifton2.github.io/blog/networkx/graphs/unit%20testing/2021/02/17/Networkx.html",
            "relUrl": "/networkx/graphs/unit%20testing/2021/02/17/Networkx.html",
            "date": " • Feb 17, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jdclifton2.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jdclifton2.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hello! . First, let me begin by thanking for you reading my blog. I am JC. I come from the beautiful mountains of North Carolina (pictured below). I like to grow a wide variety of plants in the garden of my mind. Some topics I enjoy are programming, mathematics, the German language (Ich spreche ein bisschen Deutsch :] ), and basketball (go hornets :[ ). For the past few years I have worked as a math/computer science tutor where I get to help students grow in their appreciation and knowledge for these subjects. I have also worked as a math researcher on multiple projects involving hypergraphs, graph theory, and Ramsey theory. Through my research, I have had the great honor of presenting some of my work at both the Joint Mathematics Meeting in Denver, Colorado and at The University of North Carolina at Greensboro. . Many of us come from circumstances that make learning a challenge. Despite this fact, I believe everyone has the potential to learn. I speak from experience. I am a first generation college student. In fact, neither of my parents finished highschool. In fact, I myself never finished highschool and instead obtained my G.E.D. Through much hard work, determination, and great support I went from having never taken math course to obtaining degrees in both mathematics and computer science. If you also come from challenging circumstances, take courage! If I can do it, you can do it too. . I hope you have enjoyed getting to know me and I hope you find my blog to be useful and insightful. . Auf Wiedersehen! .",
          "url": "https://jdclifton2.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Research",
          "content": "Research Interests: Ramsey Theory, Hypergraphs, Extremal Combinatorics . Research Publications (* indicates paper is under review for publication): . A Weakened Version of Strict Schur Numbers * A generalization of Schur numbers, analogous to the weakened generalization of Ramsey numbers. | . | Monochromatic Subhypergraphs in Stochastic Processes on Hypergraphs * A recursive formula for the number of ways to color j vertices blue in an r-uniform hyperpath of size n while avoiding a blue monochromatic sub-hyperpath of length k. | . | Hypergraph Ramsey Numbers Involving Trees, Stars, and Complete Hypergraphs * Focused on further developing Ramsey theory for trees, stars, and complete hypergraphs. | . | An axiomatic examination of Armitage and Doll Carcinogenesis * In this study, we examine a paper by Armitage and Doll, and the mathematical derivation of their model. | . | .",
          "url": "https://jdclifton2.github.io/blog/research/",
          "relUrl": "/research/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jdclifton2.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}