{
  
    
        "post0": {
            "title": "Testing Function Runtime for Bipartite Graphs",
            "content": "import networkx as nx from typing import Dict, Tuple, List import numpy as np from numpy.random import geometric import timeit from random import randrange, randint import pandas as pd . The goal of this notebook is to compare the speed of functions designed for finding all neighbors within distance 3 of a vertex in a graph. . The current function in the github repo. . def robust_shortest_path_length(*args, **kwargs) -&gt; float: output = np.inf try: output = nx.shortest_path_length(*args, **kwargs) finally: return output def NeighborsSubgraph(contribution_graph: nx.Graph, grant: str) -&gt; nx.Graph: &quot;&quot;&quot;&quot;&quot;&quot; source = grant distances_to_source = { target: robust_shortest_path_length(contribution_graph, source, target) for target in contribution_graph.nodes } neighbors = [ node for (node, distance) in distances_to_source.items() if distance &lt;= 3 ] neighbors_subgraph = contribution_graph.subgraph(neighbors) return neighbors_subgraph . Proposed function . def Neighbors(contribution_graph: nx.Graph, grant: str) -&gt; nx.Graph: &quot;&quot;&quot;&quot;&quot;&quot; return nx.ego_graph(contribution_graph, grant, radius=3, center=False) . The relationship between donators and projects can be modeled as a bipartite graph. Therefore, bipartite graphs will be the most structure that this function is ran on and will need to be the most optimized. A bipartite graph, also called a bigraph, is a set of graph vertices decomposed into two disjoint sets such that no two graph vertices within the same set are adjacent. We will now write a function that will create a random bipartite graph using this definition. . def random_bipartite(set_a_card, set_b_card): &quot;&quot;&quot; This function creates a random bipartite graph. :param set_a_card: The cardinality of set_a. :param set_b_card: The cardinality of set_b. :param total_edges: The number of edges the graph should have. :return: A bipartite graph with random edges. &quot;&quot;&quot; if set_b_card &lt; set_a_card: print(&quot;Invalid.&quot;) return None #create two disjoin sets set_a = set(range(0, set_a_card)) set_b = set(range(set_a_card, set_b_card)) bipart = nx.Graph() bipart.add_nodes_from(set_a, bipartite=0) bipart.add_nodes_from(set_b, bipartite=1) for vert_a in set_a: #the number of edges a specific vertex will have num_edges = geometric(p=0.35) for edge in range(num_edges): #pick a random vertex from set_b vert_b = randrange(set_a_card, set_b_card) bipart.add_edge(vert_a, vert_b) return bipart . def create_bigraphs(num_graphs = 50, max_card = 20, min_card = 1, min_enteries = 1): &quot;&quot;&quot; This function creates a suite of random bipartite graphs. :param num_graphs: The number of graphs to generate. :param max_card: The maximum cardinality any graph in the suite can have. :param min_card: The minimum cardinality any graph in the suite can have. :return: An array of random graphs. &quot;&quot;&quot; graphs = [] for i in range(min_enteries, num_graphs + 1): set_a_card = randint(min_card, max_card) offset = randint(min_enteries, max_card) set_b_card = randint(set_a_card + 1, set_a_card + offset) graph = random_bipartite(set_a_card, set_b_card) graphs.append(graph) return np.array(graphs, dtype=object) . graphs = create_bigraphs(num_graphs = 500, max_card = 30) . def create_times_df(graphs): df = pd.DataFrame(columns=[&quot;original_func_time&quot;, &quot;new_func_time&quot; , &quot;num_edges&quot;, &quot;num_verticies&quot;]) #df = pd.DataFrame(columns=[&quot;original_func_time&quot;, &quot;new_func_time&quot; , &quot;set_a_card&quot;, &quot;set_b_card&quot;, &quot;num_edges&quot;, &quot;num_verticies&quot;]) for graph in graphs: #closure is needed for the timeit library to work def func1(): def closure(): return NeighborsSubgraph(graph, 1) t1 = timeit.timeit(closure, number=100) return t1 def func2(): def closure2(): return Neighbors(graph, 1) t2 = timeit.timeit(closure2, number=100) return t2 num_verticies = len(graph) num_edges = graph.number_of_edges() #set_a,set_b = bipartite.sets(graph) #set_a_card = len(set_a) #set_b_card = len(set_b) series = { &quot;original_func_time&quot;: func1(), &quot;new_func_time&quot;: func2(), #&quot;set_a_card&quot;: set_a_card, #&quot;set_b_card&quot;: set_b_card, &quot;num_edges&quot;: num_edges, &quot;num_verticies&quot;: num_verticies, } df = df.append(series, ignore_index=True) return df . df = create_times_df(graphs) . from matplotlib import pyplot . Plotting the results . Test Suite 1 . df[&#39;original_func_time&#39;].hist() df[&#39;new_func_time&#39;].hist() . &lt;AxesSubplot:&gt; . pyplot.hist(df[&#39;original_func_time&#39;], bins = 40, label=&#39;original function&#39;) pyplot.hist(df[&#39;new_func_time&#39;], bins = 40, label=&#39;new function&#39;) pyplot.legend(loc=&#39;upper right&#39;) pyplot.show() . pyplot.hist(df[&#39;new_func_time&#39;], bins = 40, label=&#39;new function&#39;, color = &#39;orange&#39;) pyplot.hist(df[&#39;original_func_time&#39;], bins = 40, label=&#39;original function&#39;, color = &#39;blue&#39;) pyplot.legend(loc=&#39;upper right&#39;) pyplot.show() . pyplot.scatter(x = df[&#39;num_edges&#39;] ,y = df[&#39;new_func_time&#39;]) . &lt;matplotlib.collections.PathCollection at 0x7f88517891c0&gt; . pyplot.scatter(x = df[&#39;num_edges&#39;] ,y = df[&#39;original_func_time&#39;]) . &lt;matplotlib.collections.PathCollection at 0x7f885759cdc0&gt; . Test Suite 2 . graphs = create_bigraphs(num_graphs = 500, max_card = 60) df2 = create_times_df(graphs) . pyplot.hist(df2[&#39;original_func_time&#39;], bins = 40, label=&#39;original function&#39;) pyplot.hist(df2[&#39;new_func_time&#39;], bins = 40, label=&#39;new function&#39;) pyplot.legend(loc=&#39;upper right&#39;) pyplot.show() . pyplot.scatter(x = df2[&#39;num_edges&#39;] ,y = df2[&#39;new_func_time&#39;]) . &lt;matplotlib.collections.PathCollection at 0x7f885712d370&gt; . pyplot.scatter(x = df2[&#39;num_edges&#39;] ,y = df2[&#39;original_func_time&#39;]) . &lt;matplotlib.collections.PathCollection at 0x7f885419a280&gt; . Test Suite 3 . graphs = create_bigraphs(num_graphs = 500, max_card = 100) df3 = create_times_df(graphs) . pyplot.hist(df3[&#39;original_func_time&#39;], bins = 40, label=&#39;original function&#39;) pyplot.hist(df3[&#39;new_func_time&#39;], bins = 40, label=&#39;new function&#39;) pyplot.legend(loc=&#39;upper right&#39;) pyplot.show() . pyplot.scatter(x = df3[&#39;num_edges&#39;] ,y = df2[&#39;new_func_time&#39;]) . &lt;matplotlib.collections.PathCollection at 0x7f8856dfd5e0&gt; . pyplot.scatter(x = df3[&#39;num_edges&#39;] ,y = df2[&#39;original_func_time&#39;]) . &lt;matplotlib.collections.PathCollection at 0x7f88501bc610&gt; . import unittest as ut from networkx.algorithms import bipartite class TestBipartite(ut.TestCase): def test_rand_bipartite_creator(self): results = [] for i in range(1,1000): set_a_card = randint(1, 1000) offset = randint(2,1000) set_b_card = randint(set_a_card + 1, set_a_card + offset) graph = random_bipartite(set_a_card, set_b_card) result = bipartite.is_bipartite(graph) results.append(result) condition = False in results self.assertFalse(condition) def test_create_bigraphs(self): graphs = create_bigraphs() self.assertEqual(len(graphs), 50) results = [bipartite.is_bipartite(graph) for graph in graphs] condition = False in results self.assertFalse(condition) ut.main(argv=[&#39;&#39;], exit=False) . .. - Ran 2 tests in 5.010s OK . &lt;unittest.main.TestProgram at 0x7f88585de340&gt; .",
            "url": "https://jdclifton2.github.io/blog/networkx/graphs/unit%20testing/timeit/python/2021/03/23/Timing.html",
            "relUrl": "/networkx/graphs/unit%20testing/timeit/python/2021/03/23/Timing.html",
            "date": " • Mar 23, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Writing Networkx Functions",
            "content": "import sys !{sys.executable} -m pip install networkx . Requirement already satisfied: networkx in /usr/local/lib/python3.6/dist-packages (2.5) Requirement already satisfied: decorator&gt;=4.3.0 in /usr/local/lib/python3.6/dist-packages (from networkx) (4.4.2) . import networkx as nx import unittest as ut . def n_distance_neighbors(G, start_node, distance): &quot;&quot;&quot; This function takes in a graph, starting node, and a distance. It will traverse the graph from the starting node and find all the neighbors within the distance where distance between two vertices in a graph is the number of edges in a shortest path. :param G: A networkx graph. :param start_node: The starting point. Distance from this node. Must be in G. :param distance: The distance to find neighbors within. :return: A list of vertices within specified distance. :rtype: List &quot;&quot;&quot; neighbors = [] nodes = nx.single_source_shortest_path_length(G,start_node,distance) for x in nodes: if nodes[x] &lt;= distance: neighbors.append(x) return neighbors . class TestNeighbors(ut.TestCase): def test_distance_two_simple_graph(self): G = nx.Graph() G.add_edges_from([(1, 2), (1, 3),(1,4),(2,5),(5,6),(6,7)]) result = n_distance_neighbors(G, 1, 2) answer = [1,2,3,4,5] self.assertEqual(result, answer) def test_distance_three_simple_graph(self): G = nx.Graph() G.add_edges_from([(1, 2), (1, 3),(1,4),(2,5),(5,6),(6,7)]) result = n_distance_neighbors(G, 1, 3) answer = [1,2,3,4,5,6] self.assertEqual(result, answer) def test_distance_three_simple_graph(self): G = nx.Graph() G.add_edges_from([(1, 2), (1, 3),(1,4),(2,5),(5,6),(6,7)]) result = n_distance_neighbors(G, 1, 4) answer = [1,2,3,4,5,6,7] self.assertEqual(result, answer) def test_distance_three_simple_graph(self): G = nx.Graph() G.add_edges_from([(1, 2), (1, 3),(1,4),(2,5),(5,6),(6,7)]) result = n_distance_neighbors(G, 1, 4) answer = [1,2,3,4,5,6,7] self.assertEqual(result, answer) def test_distance_two_complex_graph(self): G = nx.Graph() G.add_edges_from([(1, 2), (1, 3),(1,9), (2,3), (2,4), (2,5), (2,8), (3,6), (4,5), (4,12), (4,13),(6,7), (7,8), (9,10), (10,11), (11,12), (13,14), (14,15), (14,17),(15,16) ]) result = n_distance_neighbors(G, 1, 2) result.sort() answer = [1,2,3,4,5,6,8,9, 10] self.assertEqual(result, answer) def test_distance_three_complex_graph(self): G = nx.Graph() G.add_edges_from([(1, 2), (1, 3),(1,9), (2,3), (2,4), (2,5), (2,8), (3,6), (4,5), (4,12), (4,13),(6,7), (7,8), (9,10), (10,11), (11,12), (13,14), (14,15), (14,17),(15,16) ]) result = n_distance_neighbors(G, 1, 3) result.sort() answer = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] self.assertEqual(result, answer) def test_distance_four_complex_graph(self): G = nx.Graph() G.add_edges_from([(1, 2), (1, 3),(1,9), (2,3), (2,4), (2,5), (2,8), (3,6), (4,5), (4,12), (4,13),(6,7), (7,8), (9,10), (10,11), (11,12), (13,14), (14,15), (14,17),(15,16) ]) result = n_distance_neighbors(G, 1, 4) result.sort() answer = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,14] self.assertEqual(result, answer) def test_distance_five_complex_graph(self): G = nx.Graph() G.add_edges_from([(1, 2), (1, 3),(1,9), (2,3), (2,4), (2,5), (2,8), (3,6), (4,5), (4,12), (4,13),(6,7), (7,8), (9,10), (10,11), (11,12), (13,14), (14,15), (14,17),(15,16) ]) result = n_distance_neighbors(G, 1, 5) result.sort() answer = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17] self.assertEqual(result, answer) def test_distance_six_complex_graph(self): G = nx.Graph() G.add_edges_from([(1, 2), (1, 3),(1,9), (2,3), (2,4), (2,5), (2,8), (3,6), (4,5), (4,12), (4,13),(6,7), (7,8), (9,10), (10,11), (11,12), (13,14), (14,15), (14,17),(15,16) ]) result = n_distance_neighbors(G, 1, 6) result.sort() answer = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] self.assertEqual(result, answer) ut.main(argv=[&#39;&#39;], exit=False) . ....... - Ran 7 tests in 0.008s OK . &lt;unittest.main.TestProgram at 0x7fe7c4594860&gt; .",
            "url": "https://jdclifton2.github.io/blog/networkx/graphs/unit%20testing/2021/02/17/Networkx.html",
            "relUrl": "/networkx/graphs/unit%20testing/2021/02/17/Networkx.html",
            "date": " • Feb 17, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jdclifton2.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jdclifton2.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hello! . First, let me begin by thanking for you reading my blog. I am JC. I come from the beautiful mountains of North Carolina (pictured below). I like to grow a wide variety of plants in the garden of my mind. Some topics I enjoy are programming, mathematics, the German language (Ich spreche ein bisschen Deutsch :] ), and basketball (go hornets :[ ). For the past few years I have worked as a math/computer science tutor where I get to help students grow in their appreciation and knowledge for these subjects. I have also worked as a math researcher on multiple projects involving hypergraphs, graph theory, and Ramsey theory. Through my research, I have had the great honor of presenting some of my work at both the Joint Mathematics Meeting in Denver, Colorado and at The University of North Carolina at Greensboro. . Many of us come from circumstances that make learning a challenge. Despite this fact, I believe everyone has the potential to learn. I speak from experience. I am a first generation college student. In fact, neither of my parents finished highschool. In fact, I myself never finished highschool and instead obtained my G.E.D. Through much hard work, determination, and great support I went from having never taken math course to obtaining degrees in both mathematics and computer science. If you also come from challenging circumstances, take courage! If I can do it, you can do it too. . I hope you have enjoyed getting to know me and I hope you find my blog to be useful and insightful. . Auf Wiedersehen! .",
          "url": "https://jdclifton2.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Research",
          "content": "Research Interests: Ramsey Theory, Hypergraphs, Extremal Combinatorics . Research Publications (* indicates paper is under review for publication): . A Weakened Version of Strict Schur Numbers * A generalization of Schur numbers, analogous to the weakened generalization of Ramsey numbers. | . | Monochromatic Subhypergraphs in Stochastic Processes on Hypergraphs * A recursive formula for the number of ways to color j vertices blue in an r-uniform hyperpath of size n while avoiding a blue monochromatic sub-hyperpath of length k. | . | Hypergraph Ramsey Numbers Involving Trees, Stars, and Complete Hypergraphs * Focused on further developing Ramsey theory for trees, stars, and complete hypergraphs. | . | An axiomatic examination of Armitage and Doll Carcinogenesis * In this study, we examine a paper by Armitage and Doll, and the mathematical derivation of their model. | . | .",
          "url": "https://jdclifton2.github.io/blog/research/",
          "relUrl": "/research/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jdclifton2.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}